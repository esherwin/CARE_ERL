{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12300\viewh7500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /* Aggregate daily panel to 3hr */\
\
/* Set memory limit */\
set more off\
set max_memory 100000m\
\
/* Load daily panel */\
/* use "U:\\WCAI\\100917hourlypanel.dta" Doesn't have untransformed kWh */\
use "U:\\WCAI\\140707panel.dta"\
/* Create 3hr blocks */\
gen hour3block = ceil(hour/3)\
\
\
/* Create electricity consumption in 3-hour blocks */\
gen kWhBlock1 = hour1kWh + hour2kWh + hour3kWh\
gen kWhBlock2 = hour4kWh + hour5kWh + hour6kWh\
gen kWhBlock3 = hour7kWh + hour8kWh + hour9kWh\
gen kWhBlock4 = hour10kWh + hour11kWh + hour12kWh\
gen kWhBlock5 = hour13kWh + hour14kWh + hour15kWh\
gen kWhBlock6 = hour16kWh + hour17kWh + hour18kWh\
gen kWhBlock7 = hour19kWh + hour20kWh + hour21kWh\
gen kWhBlock8 = hour22kWh + hour23kWh + hour24kWh\
\
/* Create average temperature in 3-hour blocks */\
gen tempBlock1 = (temphour1 + temphour2 + temphour3)/3\
gen tempBlock2 = (temphour4 + temphour4 + temphour6)/3\
gen tempBlock3 = (temphour7 + temphour8 + temphour9)/3\
gen tempBlock4 = (temphour10 + temphour11 + temphour12)/3\
gen tempBlock5 = (temphour13 + temphour14 + temphour15)/3\
gen tempBlock6 = (temphour16 + temphour17 + temphour18)/3\
gen tempBlock7 = (temphour19 + temphour20 + temphour21)/3\
gen tempBlock8 = (temphour22 + temphour23 + temphour24)/3\
\
/* Create indicator for at least 3 months of data pre and post enrollment in CARE. This will be more work than I currently have time for */\
/* care3MoPreData = care_startdate1edate >= <start date> + 3 */\
\
/* Keep only necessary variables*/\
keep service_point_id date valley coast hills jan feb mar apr may jun jul aug sep nov oct nov dec mon tue wed thu fri sat sun rebateparticipant1 bppcurrent carecurrent climatesmartcurrent diraccesscurrent smartaccurrent smartratecurrent rebate1bpp rebate1care rebate1climate rebate1dir rebate1smartac rebate1smartrate myenergy blockgroup rebateparticipant1 valley coast hills rebateparticipant1confirm bppcurrent carecurrent climatesmartcurrent diraccesscurrent smartaccurrent smartratecurrent quintile1 quintile2 quintile3 quintile4 quintile5 kWhp05 kWhp95 blockgroup prentocc ppoor medhseval pcollegeormore myenergy_lastlogin myenergyedate bppHH careHH climateHH directHH smartacHH smartrateHH firstobs lastobs medincome weekday weekend kWhBlock1 kWhBlock2 kWhBlock3 kWhBlock4 kWhBlock5 kWhBlock6 kWhBlock7 kWhBlock8 tempBlock1 tempBlock2 tempBlock3 tempBlock4 tempBlock5 tempBlock6 tempBlock7 tempBlock8\
\
/* Create a date and service point ID for reshaping */\
gen datesp = date + string(service_point_id , "%012.0f")\
\
/* Reshape to 3-hour blocks */\
reshape long kWhBlock tempBlock, i(datesp) j(hour3block)\
\
/* Create log electricity consumption by 3-hour block */\
gen lkWh = log(kWhBlock)\
\
/* Create dates formatted as days\
gen dateasdate = date(date, "YMD")\
format dateasdate %d\
\
/* Weekday-week-of-sample-hour-of-day fixed effects */\
gen weekofsample = string(wofd(dateasdate), "%tw")\
gen dayofweek = dow(dateasdate)\
gen weekday = string((dayofweek > 0) & (dayofweek < 6))\
tostring hour3block, replace\
tostring weekday, replace\
gen weekdayweekofsamplehourblock = weekofsample + "-" + hour3block + "-" + weekday\
\
/* Define summer (everything else is \'93winter\'94 in California) */\
gen summer = jun + jul + aug + sep\
\
/* Define dwelling-hour-of-day and dwelling-hour-of-day-season fixed effects */\
gen summerstring = string(summer)\
gen spidstring = string(service_point_id, "%16.0f")\
gen dwellinghourblock = spidstring + "-" + hour3block\
gen dwellinghourseason = spidstring + "-" + hour3block + "-" + summerstring\
destring hour3block, replace\
\
/* Create service point-hourblock fixed effects */\
tostring service_point_id, replace\
tostring hour3block, replace\
gen spidhour3block =service_point_id + hour3block\
destring spidhour3block, replace\
destring hour3block, replace\
destring service_point_id, replace\
\
/* Create high and low temperature variables */\
gen templowval = cond(tempBlock <= (18+1/3), tempBlock, 0)\
gen temphighval = cond(tempBlock > (18+1/3), tempBlock, 0)\
\
\
/* Select a pseudo-random subset of service point IDs */\
su service_point_id, detail\
gen low10pctSPIDs = service_point_id < r(p10)\
\
/* Check for representativeness of the subsample\
su coast hills valley\
\
    Variable |        Obs        Mean    Std. Dev.       Min        Max\
-------------+---------------------------------------------------------\
       coast |146,271,168    .1993862    .3995389          0          1\
       hills |146,271,168    .3982434    .4895361          0          1\
      valley |146,271,168    .3956237    .4889842          0          1\
\
su coast hills valley if low10pctSPIDs == 1\
\
    Variable |        Obs        Mean    Std. Dev.       Min        Max\
-------------+---------------------------------------------------------\
       coast | 14,624,360    .2830791    .4504945          0          1\
       hills | 14,624,360     .133719    .3403502          0          1\
      valley | 14,624,360    .5790084    .4937182          0          1\
\
\
Nope. Doesn't look like SPID is plausibly random :(\
*/\
\
\
/* Drop extreme temperatures*/\
keep if tempBlock > -30 & tempBlock < 50\
\
/* Create random subsample of 10% of the data */\
set seed 1000\
gen runif = runiform()\
gen in10pctsample = runif <= 0.1\
gen in1pctsample = runif <= 0.01\
\
/* Merge smart meter installation dates */\
/* Use a many-to-one merge from  premise_id_pseudo to E_SM_INSTALL_DATE from the _02premise table */\
\
merge m:1 premise_id_pseudo using "U:/WCAI/_02premiseOnlySMInstall04042019.dta"\
\
/* Create _n and _N by SPID */\
sort service_point_id\
by service_point_id: gen firstobs2 = _n == 1\
by service_point_id: gen lastobs2 = _n == _N\
\
/* Re-convert weekdays to numbers\
destring weekday, replace}
